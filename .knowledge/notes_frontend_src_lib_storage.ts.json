{"is_source_file": true, "format": "TypeScript", "description": "This file provides utility functions for persisting notes to localStorage, managing a lightweight pub/sub store for note state, and functions to create, select, update, and delete notes. It defines how notes are stored locally and how the front-end interacts with the note data and listeners.", "external_files": ["./types"], "external_methods": ["crypto.randomUUID()", "JSON.parse()", "JSON.stringify()", "localStorage.getItem()", "localStorage.setItem()"], "published": ["loadState", "saveState", "initStore", "subscribe", "getState", "createNote", "selectNote", "updateNote", "deleteNote"], "classes": [], "methods": [{"name": "export function loadState(): NotesState { loadState", "description": "Loads the notes state from localStorage, providing default values if not present or in case of errors.", "scope": "", "scopeKind": ""}, {"name": "export function saveState(state: NotesState): void { saveState", "description": "Persists the current notes state to localStorage.", "scope": "", "scopeKind": ""}, {"name": "export function initStore() { initStore", "description": "Initializes the in-memory store from localStorage and emits the current state.", "scope": "", "scopeKind": ""}, {"name": "export function subscribe(listener: Listener): () => void { subscribe", "description": "Allows components to subscribe to state changes. Returns an unsubscribe function.", "scope": "", "scopeKind": ""}, {"name": "export function getState(): NotesState { getState", "description": "Returns the current snapshot of the notes state.", "scope": "", "scopeKind": ""}, {"name": "export function createNote(): Note { createNote", "description": "Creates a new empty note, adds it to the state, and sets it as selected.", "scope": "", "scopeKind": ""}, {"name": "export function selectNote(id: string | null) { selectNote", "description": "Sets a specific note as the currently selected note by id.", "scope": "", "scopeKind": ""}, {"name": "export function updateNote(id: string, patch: Partial<Omit<Note, \"id\">>) { updateNote", "description": "Updates a note identified by id with the provided partial data.", "scope": "", "scopeKind": ""}, {"name": "export function deleteNote(id: string) { deleteNote", "description": "Deletes a note by id and updates the selection accordingly.", "scope": "", "scopeKind": ""}, {"name": "function emit() { emit", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["localStorage.getItem", "localStorage.setItem", "JSON.parse", "JSON.stringify", "crypto.randomUUID", "Date.now", "Array.isArray"], "search-terms": ["localStoragePersistence", "notesStateManagement", "pubsubNotes", "noteCRUD"], "state": 2, "file_id": 11, "knowledge_revision": 25, "git_revision": "", "ctags": [{"_type": "tag", "name": "Listener", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^type Listener = (state: NotesState) => void;$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "createNote", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function createNote(): Note {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "deleteNote", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function deleteNote(id: string) {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "emit", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^function emit() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getState", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function getState(): NotesState {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^  const idx = state.notes.findIndex((n) => n.id === id);$/", "language": "TypeScript", "kind": "constant", "scope": "deleteNote", "scopeKind": "function"}, {"_type": "tag", "name": "initStore", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function initStore() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "l", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^  for (const l of listeners) l(state);$/", "language": "TypeScript", "kind": "constant", "scope": "emit", "scopeKind": "function"}, {"_type": "tag", "name": "listeners", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^const listeners = new Set<Listener>();$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "loadState", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function loadState(): NotesState {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "newNote", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^  const newNote: Note = {$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "parsed", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^    const parsed = JSON.parse(raw) as NotesState;$/", "language": "TypeScript", "kind": "constant", "scope": "loadState", "scopeKind": "function"}, {"_type": "tag", "name": "raw", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^    const raw = localStorage.getItem(\"notes_state_v1\");$/", "language": "TypeScript", "kind": "constant", "scope": "loadState", "scopeKind": "function"}, {"_type": "tag", "name": "saveState", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function saveState(state: NotesState): void {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "selectNote", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function selectNote(id: string | null) {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "state", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^let state: NotesState = { notes: [], selectedId: null };$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "subscribe", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function subscribe(listener: Listener): () => void {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "updateNote", "path": "/home/kavia/workspace/code-generation/simple-notes-organizer-173124-173160/notes_frontend/src/lib/storage.ts", "pattern": "/^export function updateNote(id: string, patch: Partial<Omit<Note, \"id\">>) {$/", "language": "TypeScript", "kind": "function"}], "hash": "6d81139f02fd98e388bccd7841de6025", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/lib/storage.ts", "fields": [{"name": "let state: NotesState = { notes: [], selectedId: null };", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"25": ""}]}